## Assignment, types, and operators
1 + 1 == 2
# One number type
1 + 1.1 == 2.1
a = 1
# Single quotes for characters and strings
# No seperate types, a character is just a
# little string.
b = 'a'
longString = 'a \
b \
c'
multilineString = 'a \n\
b \n\
c \n\
d'
c = 1.1
d = -1
e = -1.1
e != d
a >= b # TypeError
d <= c == true
d >= c == false
d != c == true
d == c == false
d < c == true
d > c == false

# Vectors, not lists
f = [1, 2]
g = ['i', '9']
h = [1, '2']
g[0] == 'i'
g[-1] == '9'
# ++ operator works for strings and arrays
concat = 'foo' ++ ' ' ++ 'bar'
concat == 'foo bar'

# Double quotes to allow interpolation
templated = "concat {f[0]}"
# String interpolation works with different types
templated == 'concat 1'
templatedMultiline = "foo
bar
{g[0]}
"
# Interpolation is the only way to use
# a non-string inside a string
x = 1 + 'asdf' # TypeError
# Interpolation will fail on non-primitives
x = [1]
y = "{x[0]}" # '1'
z = "{x}" # TypeError

# Dictionaries
# No need for quote marks around keys, they're
# automatically strings. h['3'] == 3.
# No dot notation, and no computed keys.
h = { a : 1, b : 2, 3 : 3 }
# No dot notation
h['a'] == 1
