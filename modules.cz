## Modules
# TODO: import/export or something more concise like in/out or pub/require?
# All imports are qualified, no need to specify a qualifier for local or
# global module, only for third-party. No destructured
# imports, but you can use assignment if you need to.
import system
sys = system
out = sys.stdout
# Print implementation used above.
print = fn! (x) system.stdout.write(x ++ '\n')
import ./foo # Import from local file foo
import ./foo/bar # Import bar from the directory foo
import ../bar # Import from directory above
import bar # Import global
import github.com/zacanger/bar as zbar # Import from installed module
# Assume a file in the same directory called bar.cozy:
a = 1
b = 2
export c = a + 1
f = fn () a
export g = fn () f
# Back in the main file
import ./bar
bar.a # Error
bar.b # error
bar.c # 3
bar.f() # Error
f = bar.g() # function
f() # 1
# Imports and exports must be top level. The following examples would fail.
a = fn foo () {
  import system # Error
  export b = 1 # Error
}
